#!/usr/bin/env python
# test_xmlschema.py - test schema parsing, part of osa.
# Copyright 2013 Sergey Bozhenkov, boz at ipp.mpg.de
# Licensed under LGPLv3 or later, see the COPYING file.

import sys
sys.path.insert(0, "../")
from osa.xmlschema import *
from osa.xmlparser import *
from tests.base import BaseTest
import xml.etree.cElementTree as etree
import unittest


class TestXMLSchema(BaseTest):

    def setUp(self):
        root = parse_qualified_from_url(self.test_files["schema.xml"])
        self.schema = XMLSchemaParser(root)

    def tearDown(self):
        self.schema = None

    def test_get_list_of_types(self):
        res = self.schema.get_list_of_defined_types()
        self.assertTrue("{vostok}Name" in res)
        self.assertEqual(res["{vostok}Name"].tag, "{%s}complexType" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}Name"].get("name"), "Name")
        self.assertTrue("{vostok}Person" in res)
        self.assertEqual(res["{vostok}Person"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}Person"].get("name"), "Person")
        self.assertTrue("{vostok}Robot" in res)
        self.assertEqual(res["{vostok}Robot"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}Robot"].get("name"), "Robot")
        self.assertTrue("{vostok}Counter" in res)
        self.assertEqual(res["{vostok}Counter"].tag, "{%s}simpleType" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}Counter"].get("name"), "Counter")
        self.assertTrue("{vostok}Profession" in res)
        self.assertEqual(res["{vostok}Profession"].tag, "{%s}simpleType" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}Profession"].get("name"), "Profession")
        self.assertTrue("{vostok}Shish" in res)
        self.assertEqual(res["{vostok}Shish"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}Shish"].get("name"), "Shish")
        self.assertTrue("{zapad}Address" in res)
        self.assertEqual(res["{zapad}Address"].tag, "{%s}complexType" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{zapad}Address"].get("name"), "Address")
        self.assertTrue("{sever}Car" in res)
        self.assertEqual(res["{sever}Car"].tag, "{%s}complexType" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{sever}Car"].get("name"), "Car")
        # added after fixing issue 11 - present annotation in element tag
        self.assertEqual(res["{vostok}PersonDoc"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}PersonDoc"].get("name"), "PersonDoc")
        self.assertEqual(res["{vostok}CounterDoc"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}CounterDoc"].get("name"), "CounterDoc")
        self.assertEqual(res["{vostok}RobotDoc"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}RobotDoc"].get("name"), "RobotDoc")
        self.assertEqual(res["{vostok}ShishDoc"].tag, "{%s}element" %xmlnamespace.NS_XSD)
        self.assertEqual(res["{vostok}ShishDoc"].get("name"), "ShishDoc")

    def test_convert(self):
        xtypes = self.schema.get_list_of_defined_types()
        types = XMLSchemaParser.convert_xmltypes_to_python(xtypes)
        self.assertEqual(types["{vostok}Name"].__class__.__name__, "ComplexTypeMeta")
        self.assertTrue("{vostok}Name" in types)
        self.assertTrue(hasattr(types["{vostok}Name"], "firstName"))
        self.assertTrue(hasattr(types["{vostok}Name"], "lastName"))
        self.assertEqual(types["{vostok}Name"]._namespace, "vostok")
        self.assertTrue("{vostok}Person" in types)
        self.assertEqual(types["{vostok}Person"].__class__.__name__, "ComplexTypeMeta")
        self.assertTrue(hasattr(types["{vostok}Person"], "age"))
        self.assertTrue(hasattr(types["{vostok}Person"], "weight"))
        self.assertTrue(hasattr(types["{vostok}Person"], "name"))
        self.assertTrue(hasattr(types["{vostok}Person"], "place"))
        self.assertTrue(hasattr(types["{vostok}Person"], "car"))
        self.assertTrue(hasattr(types["{vostok}Person"], "Comment"))
        self.assertEqual(types["{vostok}Person"]._namespace, "vostok")
        self.assertTrue("{vostok}Robot" in types)
        self.assertEqual(types["{vostok}Robot"].__class__.__name__, "ComplexTypeMeta")
        self.assertTrue(hasattr(types["{vostok}Robot"], "age"))
        self.assertTrue(hasattr(types["{vostok}Robot"], "weight"))
        self.assertTrue(hasattr(types["{vostok}Robot"], "name"))
        self.assertTrue(hasattr(types["{vostok}Robot"], "place"))
        self.assertTrue(hasattr(types["{vostok}Robot"], "car"))
        self.assertTrue(hasattr(types["{vostok}Robot"], "Comment"))
        self.assertEqual(types["{vostok}Robot"]._namespace, "vostok")
        self.assertTrue("{vostok}Counter" in types)
        self.assertEqual(types["{vostok}Counter"].__base__.__name__, "XMLInteger")
        self.assertTrue(isinstance(types["{vostok}Counter"](), int))
        self.assertEqual(types["{vostok}Counter"]._namespace, "vostok")
        self.assertTrue("{vostok}Profession" in types)
        self.assertEqual(len(types["{vostok}Profession"]._allowedValues), 2)
        self.assertTrue("cosmonaut" in types["{vostok}Profession"]._allowedValues)
        self.assertTrue("scientist" in types["{vostok}Profession"]._allowedValues)
        self.assertEqual(types["{vostok}Profession"]._namespace, "vostok")
        self.assertEqual(types["{vostok}Profession"].__base__.__name__, "XMLStringEnumeration")
        self.assertTrue("{vostok}Shish" in types)
        self.assertEqual(types["{vostok}Shish"].__class__.__name__, "ComplexTypeMeta")
        self.assertEqual(len(types["{vostok}Shish"]._children), 0)
        self.assertTrue("{zapad}Address" in types)
        self.assertTrue(hasattr(types["{zapad}Address"], "city"))
        self.assertTrue(hasattr(types["{zapad}Address"], "country"))
        self.assertEqual(types["{zapad}Address"]._namespace, "zapad")
        self.assertEqual(types["{zapad}Address"].__class__.__name__, "ComplexTypeMeta")
        self.assertTrue("{sever}Car" in types)
        self.assertTrue(hasattr(types["{sever}Car"], "model"))
        self.assertTrue(hasattr(types["{sever}Car"], "weight"))
        self.assertEqual(types["{sever}Car"]._namespace, "sever")
        self.assertEqual(types["{sever}Car"].__class__.__name__, "ComplexTypeMeta")
        # added after fixing issue 11 - present annotation in element tag
        self.assertTrue("{vostok}PersonDoc" in types)
        self.assertEqual(types["{vostok}PersonDoc"].__class__.__name__, "ComplexTypeMeta")
        self.assertTrue(hasattr(types["{vostok}PersonDoc"], "age"))
        self.assertTrue(hasattr(types["{vostok}PersonDoc"], "weight"))
        self.assertTrue(hasattr(types["{vostok}PersonDoc"], "name"))
        self.assertTrue(hasattr(types["{vostok}PersonDoc"], "place"))
        self.assertTrue(hasattr(types["{vostok}PersonDoc"], "car"))
        self.assertTrue(hasattr(types["{vostok}PersonDoc"], "Comment"))
        self.assertEqual(types["{vostok}PersonDoc"]._namespace, "vostok")
        self.assertTrue("{vostok}CounterDoc" in types)
        self.assertEqual(types["{vostok}CounterDoc"].__base__.__name__, "XMLInteger")
        self.assertTrue(isinstance(types["{vostok}CounterDoc"](), int))
        self.assertEqual(types["{vostok}CounterDoc"]._namespace, "vostok")
        self.assertTrue("{vostok}RobotDoc" in types)
        self.assertEqual(types["{vostok}RobotDoc"].__class__.__name__, "ComplexTypeMeta")
        self.assertTrue(hasattr(types["{vostok}RobotDoc"], "age"))
        self.assertTrue(hasattr(types["{vostok}RobotDoc"], "weight"))
        self.assertTrue(hasattr(types["{vostok}RobotDoc"], "name"))
        self.assertTrue(hasattr(types["{vostok}RobotDoc"], "place"))
        self.assertTrue(hasattr(types["{vostok}RobotDoc"], "car"))
        self.assertTrue(hasattr(types["{vostok}RobotDoc"], "Comment"))
        self.assertEqual(types["{vostok}RobotDoc"]._namespace, "vostok")
        self.assertTrue("{vostok}ShishDoc" in types)
        self.assertEqual(types["{vostok}ShishDoc"].__class__.__name__, "ComplexTypeMeta")
        self.assertEqual(len(types["{vostok}ShishDoc"]._children), 0)
